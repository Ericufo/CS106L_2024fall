Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Unique Pointer
--------------

Q1. List one or two benefits of using RAII to manage memory instead manually calling `new` and `delete`.
A1. Using RAII make sure the allocated memory can be cleaned up in any circumstances, even if the program goes to an exception, ensuring memory leak won't happen.

Q2. When implementing move semantics for a `unique_ptr`, for example in the move constructor `unique_ptr(unique_ptr&& other)`, it is essential that we set the underlying pointer of the `other` parameter to `nullptr` before exiting the function. Explain in your own words what problem would arise if we did not.
A2. If we do not set other._ptr to nullptr, both the moved and the original unique pointer will try to free the same memory, which will cause undefined behavior and violate unique_ptr's exclusive ownership principle.

Q3. This method of recursive deallocation through RAII works great for small lists, but may pose a problem for longer lists. Why? Hint: what is the limit for how "deep" a recursive function's call stack can grow?
A3. For longer lists, the recursive deallocation can lead to a stack overflow, as each destructor call adds a frame to the call stack. The call stack has a limited size, so deeply nested recursive calls (as in long lists) may exceed this limit.

Q4. What does `std::move` do in this context? Why is it safe to use `std::move` and move semantics here?
A4. `std::move` casts `head` to an rvalue, transferring ownership of the resource to `node->next`. It is safe because `unique_ptr` ensures exclusive ownership, and `head` is reassigned immediately, avoiding dangling pointers or double deletion.