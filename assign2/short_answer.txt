Before submitting this file, make sure that there are no more TODO
placeholders remaining in the file (and remove this comment too).

Marriage Pact
-------------

Q1. It is your choice to use either an ordered or unordered set. In a few sentences, what are some of the tradeoffs between the two? Additionally, please give an example (that has not been shown in lecture) of a valid hash function that could be used to hash student names for an unordered set.
A1. The tradeoff between ordered and unordered set is time and space. Since unordered set uses hash function, it can finish many manipulations like insert in a constant time,
but the unordered structure will also consume much more spaces than ordered structure.

hash function:
struct StudentHash {
  /* this hash function is called djb2 hash 
  more info on https://theartincode.stanis.me/008-djb2/*/  
  std::size_t operator() (const std::string& name) const {
    size_t hash = 5381;
    while(auto ch : name) {
        hash = ((hash << 5) + hash) + (int)(ch); /* hash * 33 + c */
    }
    return hash;
  }
};

Q2. Note that we are saving pointers to names in the queue, not names themselves. Why might this be desired in this problem? What happens if the original set where the names are stored goes out of scope and the pointers are referenced?
A2. saving pointers can save the expenses of copying strings. If the pointer goes out the scope, there will be undefined behavior; 